/*
 * Token Tracker Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using tokentracker.Client;
using tokentracker.Client.Auth;
using tokentracker.Model;

namespace tokentracker.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokenTrackerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// AdjustTokenBalance
        /// </summary>
        /// <remarks>
        /// Adjust token balance
        /// </remarks>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokentrackerAdjustTokenBalanceResponse</returns>
        TokentrackerAdjustTokenBalanceResponse TokenTrackerAdjustTokenBalance(string tenantId, TokenTrackerAdjustTokenBalanceRequest body, int operationIndex = 0);

        /// <summary>
        /// AdjustTokenBalance
        /// </summary>
        /// <remarks>
        /// Adjust token balance
        /// </remarks>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokentrackerAdjustTokenBalanceResponse</returns>
        ApiResponse<TokentrackerAdjustTokenBalanceResponse> TokenTrackerAdjustTokenBalanceWithHttpInfo(string tenantId, TokenTrackerAdjustTokenBalanceRequest body, int operationIndex = 0);
        /// <summary>
        /// GetTokenBalance
        /// </summary>
        /// <remarks>
        /// Get token balance
        /// </remarks>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokentrackerGetTokenBalanceResponse</returns>
        TokentrackerGetTokenBalanceResponse TokenTrackerGetTokenBalance(string tenantId, Object body, int operationIndex = 0);

        /// <summary>
        /// GetTokenBalance
        /// </summary>
        /// <remarks>
        /// Get token balance
        /// </remarks>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokentrackerGetTokenBalanceResponse</returns>
        ApiResponse<TokentrackerGetTokenBalanceResponse> TokenTrackerGetTokenBalanceWithHttpInfo(string tenantId, Object body, int operationIndex = 0);
        /// <summary>
        /// StripeWebhook
        /// </summary>
        /// <remarks>
        /// Stripe webhook
        /// </remarks>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object TokenTrackerStripeWebhook(TokentrackerStripeWebhookRequest body, int operationIndex = 0);

        /// <summary>
        /// StripeWebhook
        /// </summary>
        /// <remarks>
        /// Stripe webhook
        /// </remarks>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TokenTrackerStripeWebhookWithHttpInfo(TokentrackerStripeWebhookRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokenTrackerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// AdjustTokenBalance
        /// </summary>
        /// <remarks>
        /// Adjust token balance
        /// </remarks>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokentrackerAdjustTokenBalanceResponse</returns>
        System.Threading.Tasks.Task<TokentrackerAdjustTokenBalanceResponse> TokenTrackerAdjustTokenBalanceAsync(string tenantId, TokenTrackerAdjustTokenBalanceRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// AdjustTokenBalance
        /// </summary>
        /// <remarks>
        /// Adjust token balance
        /// </remarks>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokentrackerAdjustTokenBalanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokentrackerAdjustTokenBalanceResponse>> TokenTrackerAdjustTokenBalanceWithHttpInfoAsync(string tenantId, TokenTrackerAdjustTokenBalanceRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetTokenBalance
        /// </summary>
        /// <remarks>
        /// Get token balance
        /// </remarks>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokentrackerGetTokenBalanceResponse</returns>
        System.Threading.Tasks.Task<TokentrackerGetTokenBalanceResponse> TokenTrackerGetTokenBalanceAsync(string tenantId, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetTokenBalance
        /// </summary>
        /// <remarks>
        /// Get token balance
        /// </remarks>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokentrackerGetTokenBalanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokentrackerGetTokenBalanceResponse>> TokenTrackerGetTokenBalanceWithHttpInfoAsync(string tenantId, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// StripeWebhook
        /// </summary>
        /// <remarks>
        /// Stripe webhook
        /// </remarks>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TokenTrackerStripeWebhookAsync(TokentrackerStripeWebhookRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// StripeWebhook
        /// </summary>
        /// <remarks>
        /// Stripe webhook
        /// </remarks>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TokenTrackerStripeWebhookWithHttpInfoAsync(TokentrackerStripeWebhookRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokenTrackerApi : ITokenTrackerApiSync, ITokenTrackerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TokenTrackerApi : ITokenTrackerApi
    {
        private tokentracker.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenTrackerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokenTrackerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenTrackerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokenTrackerApi(string basePath)
        {
            this.Configuration = tokentracker.Client.Configuration.MergeConfigurations(
                tokentracker.Client.GlobalConfiguration.Instance,
                new tokentracker.Client.Configuration { BasePath = basePath }
            );
            this.Client = new tokentracker.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new tokentracker.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = tokentracker.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenTrackerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TokenTrackerApi(tokentracker.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = tokentracker.Client.Configuration.MergeConfigurations(
                tokentracker.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new tokentracker.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new tokentracker.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = tokentracker.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenTrackerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TokenTrackerApi(tokentracker.Client.ISynchronousClient client, tokentracker.Client.IAsynchronousClient asyncClient, tokentracker.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = tokentracker.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public tokentracker.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public tokentracker.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public tokentracker.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public tokentracker.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// AdjustTokenBalance Adjust token balance
        /// </summary>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokentrackerAdjustTokenBalanceResponse</returns>
        public TokentrackerAdjustTokenBalanceResponse TokenTrackerAdjustTokenBalance(string tenantId, TokenTrackerAdjustTokenBalanceRequest body, int operationIndex = 0)
        {
            tokentracker.Client.ApiResponse<TokentrackerAdjustTokenBalanceResponse> localVarResponse = TokenTrackerAdjustTokenBalanceWithHttpInfo(tenantId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// AdjustTokenBalance Adjust token balance
        /// </summary>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokentrackerAdjustTokenBalanceResponse</returns>
        public tokentracker.Client.ApiResponse<TokentrackerAdjustTokenBalanceResponse> TokenTrackerAdjustTokenBalanceWithHttpInfo(string tenantId, TokenTrackerAdjustTokenBalanceRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new tokentracker.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TokenTrackerApi->TokenTrackerAdjustTokenBalance");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new tokentracker.Client.ApiException(400, "Missing required parameter 'body' when calling TokenTrackerApi->TokenTrackerAdjustTokenBalance");
            }

            tokentracker.Client.RequestOptions localVarRequestOptions = new tokentracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = tokentracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = tokentracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", tokentracker.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TokenTrackerApi.TokenTrackerAdjustTokenBalance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TokentrackerAdjustTokenBalanceResponse>("/v1/{tenantId}/adjust_token_balance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenTrackerAdjustTokenBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// AdjustTokenBalance Adjust token balance
        /// </summary>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokentrackerAdjustTokenBalanceResponse</returns>
        public async System.Threading.Tasks.Task<TokentrackerAdjustTokenBalanceResponse> TokenTrackerAdjustTokenBalanceAsync(string tenantId, TokenTrackerAdjustTokenBalanceRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            tokentracker.Client.ApiResponse<TokentrackerAdjustTokenBalanceResponse> localVarResponse = await TokenTrackerAdjustTokenBalanceWithHttpInfoAsync(tenantId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// AdjustTokenBalance Adjust token balance
        /// </summary>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokentrackerAdjustTokenBalanceResponse)</returns>
        public async System.Threading.Tasks.Task<tokentracker.Client.ApiResponse<TokentrackerAdjustTokenBalanceResponse>> TokenTrackerAdjustTokenBalanceWithHttpInfoAsync(string tenantId, TokenTrackerAdjustTokenBalanceRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new tokentracker.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TokenTrackerApi->TokenTrackerAdjustTokenBalance");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new tokentracker.Client.ApiException(400, "Missing required parameter 'body' when calling TokenTrackerApi->TokenTrackerAdjustTokenBalance");
            }


            tokentracker.Client.RequestOptions localVarRequestOptions = new tokentracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = tokentracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = tokentracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", tokentracker.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TokenTrackerApi.TokenTrackerAdjustTokenBalance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TokentrackerAdjustTokenBalanceResponse>("/v1/{tenantId}/adjust_token_balance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenTrackerAdjustTokenBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetTokenBalance Get token balance
        /// </summary>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokentrackerGetTokenBalanceResponse</returns>
        public TokentrackerGetTokenBalanceResponse TokenTrackerGetTokenBalance(string tenantId, Object body, int operationIndex = 0)
        {
            tokentracker.Client.ApiResponse<TokentrackerGetTokenBalanceResponse> localVarResponse = TokenTrackerGetTokenBalanceWithHttpInfo(tenantId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetTokenBalance Get token balance
        /// </summary>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokentrackerGetTokenBalanceResponse</returns>
        public tokentracker.Client.ApiResponse<TokentrackerGetTokenBalanceResponse> TokenTrackerGetTokenBalanceWithHttpInfo(string tenantId, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new tokentracker.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TokenTrackerApi->TokenTrackerGetTokenBalance");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new tokentracker.Client.ApiException(400, "Missing required parameter 'body' when calling TokenTrackerApi->TokenTrackerGetTokenBalance");
            }

            tokentracker.Client.RequestOptions localVarRequestOptions = new tokentracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = tokentracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = tokentracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", tokentracker.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TokenTrackerApi.TokenTrackerGetTokenBalance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TokentrackerGetTokenBalanceResponse>("/v1/{tenantId}/get_token_balance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenTrackerGetTokenBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetTokenBalance Get token balance
        /// </summary>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokentrackerGetTokenBalanceResponse</returns>
        public async System.Threading.Tasks.Task<TokentrackerGetTokenBalanceResponse> TokenTrackerGetTokenBalanceAsync(string tenantId, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            tokentracker.Client.ApiResponse<TokentrackerGetTokenBalanceResponse> localVarResponse = await TokenTrackerGetTokenBalanceWithHttpInfoAsync(tenantId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetTokenBalance Get token balance
        /// </summary>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokentrackerGetTokenBalanceResponse)</returns>
        public async System.Threading.Tasks.Task<tokentracker.Client.ApiResponse<TokentrackerGetTokenBalanceResponse>> TokenTrackerGetTokenBalanceWithHttpInfoAsync(string tenantId, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new tokentracker.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TokenTrackerApi->TokenTrackerGetTokenBalance");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new tokentracker.Client.ApiException(400, "Missing required parameter 'body' when calling TokenTrackerApi->TokenTrackerGetTokenBalance");
            }


            tokentracker.Client.RequestOptions localVarRequestOptions = new tokentracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = tokentracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = tokentracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", tokentracker.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TokenTrackerApi.TokenTrackerGetTokenBalance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TokentrackerGetTokenBalanceResponse>("/v1/{tenantId}/get_token_balance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenTrackerGetTokenBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// StripeWebhook Stripe webhook
        /// </summary>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object TokenTrackerStripeWebhook(TokentrackerStripeWebhookRequest body, int operationIndex = 0)
        {
            tokentracker.Client.ApiResponse<Object> localVarResponse = TokenTrackerStripeWebhookWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// StripeWebhook Stripe webhook
        /// </summary>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public tokentracker.Client.ApiResponse<Object> TokenTrackerStripeWebhookWithHttpInfo(TokentrackerStripeWebhookRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new tokentracker.Client.ApiException(400, "Missing required parameter 'body' when calling TokenTrackerApi->TokenTrackerStripeWebhook");
            }

            tokentracker.Client.RequestOptions localVarRequestOptions = new tokentracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = tokentracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = tokentracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TokenTrackerApi.TokenTrackerStripeWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/stripe/webhook", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenTrackerStripeWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// StripeWebhook Stripe webhook
        /// </summary>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TokenTrackerStripeWebhookAsync(TokentrackerStripeWebhookRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            tokentracker.Client.ApiResponse<Object> localVarResponse = await TokenTrackerStripeWebhookWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// StripeWebhook Stripe webhook
        /// </summary>
        /// <exception cref="tokentracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<tokentracker.Client.ApiResponse<Object>> TokenTrackerStripeWebhookWithHttpInfoAsync(TokentrackerStripeWebhookRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new tokentracker.Client.ApiException(400, "Missing required parameter 'body' when calling TokenTrackerApi->TokenTrackerStripeWebhook");
            }


            tokentracker.Client.RequestOptions localVarRequestOptions = new tokentracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = tokentracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = tokentracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TokenTrackerApi.TokenTrackerStripeWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/stripe/webhook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenTrackerStripeWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
